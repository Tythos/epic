"""Models different build products generated by Builder objects. Builders
   are responsible for implementing the build process for different artifacts;
   these models are mainly used to organize, characterize, and specify specific
   classes of build products.
"""

class BuildProduct(object):
    """Abstract base class for unifying build product models
    """

    def __init__(self):
        self.from = []
        self.to = ''

class StaticLibrary(BuildProduct):
    """Static libraries can take different forms, including extensions and
       naming conventions, depending on the specific platform and builder.
    """
    
    def __init__(self):
        pass

class EntryPoint(BuildProduct):
    """Entry points will have different file extensions for different builders
       and platforms. Default entry points (originally from "main.cpp") will
       adopt the packages name. Secondary entry points (originally from
       "main_(...).cpp") will produce "(...)" or "(...).exe" executables.
    """

    def __init__(self):
        pass

class TestCase(BuildProduct):
    """Test cases, like entry points, will have different file extensions for
       different builders and platforms. Default test cases (originally from
       "test.cpp") will adopt the package name. Seconary test cases (originally
       from "test_(...).cpp" will produce "(...)" or "(...).exe" executables.
    """

    def __init__(self):
        pass

