How to expose libraries from packages with *multiple* outputs? Some possibilities:
#. Use HTTP-like "hashtag" suffix to indicate specific libraries
#. Customize source project to bundle *all* exports into a single library
#. Split source project into seperate groups for each export

At some point, we also need to add/change library output to DLL
Extend *Config* object to include OS and/or builder properties
Do we want to support character encodings (ASCII vs UTF) for *Config* objects?

NEED TO INDICATE HEADER-ONLY DEPENDENCIES (exclude library build option in source package?)
OR: just choose main include header, rename to .CPP, let epic build it as a library

May also eventually want to explicitly specify exceptions to inclusion rules:
 * non-"main...cpp" that are entry points
 * ".cpp" that are not part of library

Can we correct / check for case sensitivity in dependency reference? (sdl2 vs SDL2, etc.)

Need to check for cases where the top-level build package has no library contents (similar to header-only packages?); perhaps build empty library? or just exclude references?

May also need to define explicit builder parameter0 (i.e., /SUBSYSTEM on MSVC)

Might be useful to have a "--debug" flag that prints eventual system commands
Currently writes (appends, after initial clear) each system call to epic.dbg
